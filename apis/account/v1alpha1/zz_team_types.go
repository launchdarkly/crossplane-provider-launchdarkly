// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleAttributesInitParameters struct {

	// (String) The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The key / name of your role attribute. In the example `$${roleAttribute/testAttribute}`, the key is `testAttribute`.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (List of String) A list of values for your role attribute. For example, if your policy statement defines the resource "proj/$${roleAttribute/testAttribute}", the values would be the keys of the projects you wanted to assign access to.
	// A list of values for your role attribute. For example, if your policy statement defines the resource `"proj/$${roleAttribute/testAttribute}"`, the values would be the keys of the projects you wanted to assign access to.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type RoleAttributesObservation struct {

	// (String) The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The key / name of your role attribute. In the example `$${roleAttribute/testAttribute}`, the key is `testAttribute`.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (List of String) A list of values for your role attribute. For example, if your policy statement defines the resource "proj/$${roleAttribute/testAttribute}", the values would be the keys of the projects you wanted to assign access to.
	// A list of values for your role attribute. For example, if your policy statement defines the resource `"proj/$${roleAttribute/testAttribute}"`, the values would be the keys of the projects you wanted to assign access to.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type RoleAttributesParameters struct {

	// (String) The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The key / name of your role attribute. In the example `$${roleAttribute/testAttribute}`, the key is `testAttribute`.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (List of String) A list of values for your role attribute. For example, if your policy statement defines the resource "proj/$${roleAttribute/testAttribute}", the values would be the keys of the projects you wanted to assign access to.
	// A list of values for your role attribute. For example, if your policy statement defines the resource `"proj/$${roleAttribute/testAttribute}"`, the values would be the keys of the projects you wanted to assign access to.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type TeamInitParameters struct {

	// (Set of String) List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
	// List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
	// +crossplane:generate:reference:type=github.com/launchdarkly/crossplane-provider-launchdarkly/apis/account/v1alpha1.CustomRole
	// +listType=set
	CustomRoleKeys []*string `json:"customRoleKeys,omitempty" tf:"custom_role_keys,omitempty"`

	// References to CustomRole in account to populate customRoleKeys.
	// +kubebuilder:validation:Optional
	CustomRoleKeysRefs []v1.Reference `json:"customRoleKeysRefs,omitempty" tf:"-"`

	// Selector for a list of CustomRole in account to populate customRoleKeys.
	// +kubebuilder:validation:Optional
	CustomRoleKeysSelector *v1.Selector `json:"customRoleKeysSelector,omitempty" tf:"-"`

	// (String) The team description.
	// The team description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Set of String) List of member IDs for users who maintain the team.
	// List of member IDs for users who maintain the team.
	// +crossplane:generate:reference:type=github.com/launchdarkly/crossplane-provider-launchdarkly/apis/account/v1alpha1.TeamMember
	// +listType=set
	Maintainers []*string `json:"maintainers,omitempty" tf:"maintainers,omitempty"`

	// References to TeamMember in account to populate maintainers.
	// +kubebuilder:validation:Optional
	MaintainersRefs []v1.Reference `json:"maintainersRefs,omitempty" tf:"-"`

	// Selector for a list of TeamMember in account to populate maintainers.
	// +kubebuilder:validation:Optional
	MaintainersSelector *v1.Selector `json:"maintainersSelector,omitempty" tf:"-"`

	// (Set of String) List of member IDs who belong to the team.
	// List of member IDs who belong to the team.
	// +crossplane:generate:reference:type=github.com/launchdarkly/crossplane-provider-launchdarkly/apis/account/v1alpha1.TeamMember
	// +listType=set
	MemberIds []*string `json:"memberIds,omitempty" tf:"member_ids,omitempty"`

	// References to TeamMember in account to populate memberIds.
	// +kubebuilder:validation:Optional
	MemberIdsRefs []v1.Reference `json:"memberIdsRefs,omitempty" tf:"-"`

	// Selector for a list of TeamMember in account to populate memberIds.
	// +kubebuilder:validation:Optional
	MemberIdsSelector *v1.Selector `json:"memberIdsSelector,omitempty" tf:"-"`

	// friendly name for the team.
	// A human-friendly name for the team.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply. (see below for nested schema)
	// A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
	RoleAttributes []RoleAttributesInitParameters `json:"roleAttributes,omitempty" tf:"role_attributes,omitempty"`
}

type TeamObservation struct {

	// (Set of String) List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
	// List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
	// +listType=set
	CustomRoleKeys []*string `json:"customRoleKeys,omitempty" tf:"custom_role_keys,omitempty"`

	// (String) The team description.
	// The team description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Set of String) List of member IDs for users who maintain the team.
	// List of member IDs for users who maintain the team.
	// +listType=set
	Maintainers []*string `json:"maintainers,omitempty" tf:"maintainers,omitempty"`

	// (Set of String) List of member IDs who belong to the team.
	// List of member IDs who belong to the team.
	// +listType=set
	MemberIds []*string `json:"memberIds,omitempty" tf:"member_ids,omitempty"`

	// friendly name for the team.
	// A human-friendly name for the team.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply. (see below for nested schema)
	// A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
	RoleAttributes []RoleAttributesObservation `json:"roleAttributes,omitempty" tf:"role_attributes,omitempty"`
}

type TeamParameters struct {

	// (Set of String) List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
	// List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
	// +crossplane:generate:reference:type=github.com/launchdarkly/crossplane-provider-launchdarkly/apis/account/v1alpha1.CustomRole
	// +kubebuilder:validation:Optional
	// +listType=set
	CustomRoleKeys []*string `json:"customRoleKeys,omitempty" tf:"custom_role_keys,omitempty"`

	// References to CustomRole in account to populate customRoleKeys.
	// +kubebuilder:validation:Optional
	CustomRoleKeysRefs []v1.Reference `json:"customRoleKeysRefs,omitempty" tf:"-"`

	// Selector for a list of CustomRole in account to populate customRoleKeys.
	// +kubebuilder:validation:Optional
	CustomRoleKeysSelector *v1.Selector `json:"customRoleKeysSelector,omitempty" tf:"-"`

	// (String) The team description.
	// The team description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The team key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Set of String) List of member IDs for users who maintain the team.
	// List of member IDs for users who maintain the team.
	// +crossplane:generate:reference:type=github.com/launchdarkly/crossplane-provider-launchdarkly/apis/account/v1alpha1.TeamMember
	// +kubebuilder:validation:Optional
	// +listType=set
	Maintainers []*string `json:"maintainers,omitempty" tf:"maintainers,omitempty"`

	// References to TeamMember in account to populate maintainers.
	// +kubebuilder:validation:Optional
	MaintainersRefs []v1.Reference `json:"maintainersRefs,omitempty" tf:"-"`

	// Selector for a list of TeamMember in account to populate maintainers.
	// +kubebuilder:validation:Optional
	MaintainersSelector *v1.Selector `json:"maintainersSelector,omitempty" tf:"-"`

	// (Set of String) List of member IDs who belong to the team.
	// List of member IDs who belong to the team.
	// +crossplane:generate:reference:type=github.com/launchdarkly/crossplane-provider-launchdarkly/apis/account/v1alpha1.TeamMember
	// +kubebuilder:validation:Optional
	// +listType=set
	MemberIds []*string `json:"memberIds,omitempty" tf:"member_ids,omitempty"`

	// References to TeamMember in account to populate memberIds.
	// +kubebuilder:validation:Optional
	MemberIdsRefs []v1.Reference `json:"memberIdsRefs,omitempty" tf:"-"`

	// Selector for a list of TeamMember in account to populate memberIds.
	// +kubebuilder:validation:Optional
	MemberIdsSelector *v1.Selector `json:"memberIdsSelector,omitempty" tf:"-"`

	// friendly name for the team.
	// A human-friendly name for the team.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply. (see below for nested schema)
	// A role attributes block. One block must be defined per role attribute. The key is the role attribute key and the value is a string array of resource keys that apply.
	// +kubebuilder:validation:Optional
	RoleAttributes []RoleAttributesParameters `json:"roleAttributes,omitempty" tf:"role_attributes,omitempty"`
}

// TeamSpec defines the desired state of Team
type TeamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TeamInitParameters `json:"initProvider,omitempty"`
}

// TeamStatus defines the observed state of Team.
type TeamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Team is the Schema for the Teams API. Provides a LaunchDarkly team resource. This resource allows you to create and manage a team within your LaunchDarkly organization. -> Note: Teams are available to customers on an Enterprise LaunchDarkly plan. To learn more, read about our pricing https://launchdarkly.com/pricing/. To upgrade your plan, contact LaunchDarkly Sales https://launchdarkly.com/contact-sales/.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,launchdarkly}
type Team struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   TeamSpec   `json:"spec"`
	Status TeamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamList contains a list of Teams
type TeamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Team `json:"items"`
}

// Repository type metadata.
var (
	Team_Kind             = "Team"
	Team_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Team_Kind}.String()
	Team_KindAPIVersion   = Team_Kind + "." + CRDGroupVersion.String()
	Team_GroupVersionKind = CRDGroupVersion.WithKind(Team_Kind)
)

func init() {
	SchemeBuilder.Register(&Team{}, &TeamList{})
}
