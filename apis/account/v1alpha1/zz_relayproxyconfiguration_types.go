// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyInitParameters struct {

	// (List of String) The list of action specifiers defining the actions to which the statement applies.
	// Either actions or not_actions must be specified. For a list of available actions read Actions reference.
	// The list of action specifiers defining the actions to which the statement applies.
	// Either `actions` or `not_actions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String) Either allow or deny. This argument defines whether the statement allows or denies access to the named resources and actions.
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (List of String) The list of action specifiers defining the actions to which the statement does not apply.
	// The list of action specifiers defining the actions to which the statement does not apply.
	NotActions []*string `json:"notActions,omitempty" tf:"not_actions,omitempty"`

	// (List of String) The list of resource specifiers defining the resources to which the statement does not apply.
	// The list of resource specifiers defining the resources to which the statement does not apply.
	NotResources []*string `json:"notResources,omitempty" tf:"not_resources,omitempty"`

	// (List of String) The list of resource specifiers defining the resources to which the statement applies.
	// The list of resource specifiers defining the resources to which the statement applies.
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type PolicyObservation struct {

	// (List of String) The list of action specifiers defining the actions to which the statement applies.
	// Either actions or not_actions must be specified. For a list of available actions read Actions reference.
	// The list of action specifiers defining the actions to which the statement applies.
	// Either `actions` or `not_actions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String) Either allow or deny. This argument defines whether the statement allows or denies access to the named resources and actions.
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (List of String) The list of action specifiers defining the actions to which the statement does not apply.
	// The list of action specifiers defining the actions to which the statement does not apply.
	NotActions []*string `json:"notActions,omitempty" tf:"not_actions,omitempty"`

	// (List of String) The list of resource specifiers defining the resources to which the statement does not apply.
	// The list of resource specifiers defining the resources to which the statement does not apply.
	NotResources []*string `json:"notResources,omitempty" tf:"not_resources,omitempty"`

	// (List of String) The list of resource specifiers defining the resources to which the statement applies.
	// The list of resource specifiers defining the resources to which the statement applies.
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type PolicyParameters struct {

	// (List of String) The list of action specifiers defining the actions to which the statement applies.
	// Either actions or not_actions must be specified. For a list of available actions read Actions reference.
	// The list of action specifiers defining the actions to which the statement applies.
	// Either `actions` or `not_actions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	// +kubebuilder:validation:Optional
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String) Either allow or deny. This argument defines whether the statement allows or denies access to the named resources and actions.
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// (List of String) The list of action specifiers defining the actions to which the statement does not apply.
	// The list of action specifiers defining the actions to which the statement does not apply.
	// +kubebuilder:validation:Optional
	NotActions []*string `json:"notActions,omitempty" tf:"not_actions,omitempty"`

	// (List of String) The list of resource specifiers defining the resources to which the statement does not apply.
	// The list of resource specifiers defining the resources to which the statement does not apply.
	// +kubebuilder:validation:Optional
	NotResources []*string `json:"notResources,omitempty" tf:"not_resources,omitempty"`

	// (List of String) The list of resource specifiers defining the resources to which the statement applies.
	// The list of resource specifiers defining the resources to which the statement applies.
	// +kubebuilder:validation:Optional
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type RelayProxyConfigurationInitParameters struct {

	// readable name for your Relay Proxy configuration.
	// The human-readable name for your Relay Proxy configuration.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1) The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read Understanding policies. (see below for nested schema)
	// The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read [Understanding policies](https://docs.launchdarkly.com/home/members/role-policies#understanding-policies).
	Policy []PolicyInitParameters `json:"policy,omitempty" tf:"policy,omitempty"`
}

type RelayProxyConfigurationObservation struct {

	// (String) The last 4 characters of the Relay Proxy configuration's unique key.
	// The last 4 characters of the Relay Proxy configuration's unique key.
	DisplayKey *string `json:"displayKey,omitempty" tf:"display_key,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// readable name for your Relay Proxy configuration.
	// The human-readable name for your Relay Proxy configuration.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1) The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read Understanding policies. (see below for nested schema)
	// The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read [Understanding policies](https://docs.launchdarkly.com/home/members/role-policies#understanding-policies).
	Policy []PolicyObservation `json:"policy,omitempty" tf:"policy,omitempty"`
}

type RelayProxyConfigurationParameters struct {

	// readable name for your Relay Proxy configuration.
	// The human-readable name for your Relay Proxy configuration.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1) The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read Understanding policies. (see below for nested schema)
	// The Relay Proxy configuration's rule policy block. This determines what content the Relay Proxy receives. To learn more, read [Understanding policies](https://docs.launchdarkly.com/home/members/role-policies#understanding-policies).
	// +kubebuilder:validation:Optional
	Policy []PolicyParameters `json:"policy,omitempty" tf:"policy,omitempty"`
}

// RelayProxyConfigurationSpec defines the desired state of RelayProxyConfiguration
type RelayProxyConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RelayProxyConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RelayProxyConfigurationInitParameters `json:"initProvider,omitempty"`
}

// RelayProxyConfigurationStatus defines the observed state of RelayProxyConfiguration.
type RelayProxyConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RelayProxyConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RelayProxyConfiguration is the Schema for the RelayProxyConfigurations API. Provides a LaunchDarkly Relay Proxy configuration resource for use with the Relay Proxy's automatic configuration feature https://docs.launchdarkly.com/home/relay-proxy/automatic-configuration. -> Note: Relay Proxy automatic configuration is available to customers on an Enterprise LaunchDarkly plan. To learn more, read about our pricing https://launchdarkly.com/pricing/. To upgrade your plan, contact LaunchDarkly Sales https://launchdarkly.com/contact-sales/. This resource allows you to create and manage Relay Proxy configurations within your LaunchDarkly organization. Be sure your state is configured securely before using this resource. See https://www.io/docs/state/sensitive-data.html for more details.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,launchdarkly}
type RelayProxyConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policy) || (has(self.initProvider) && has(self.initProvider.policy))",message="spec.forProvider.policy is a required parameter"
	Spec   RelayProxyConfigurationSpec   `json:"spec"`
	Status RelayProxyConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RelayProxyConfigurationList contains a list of RelayProxyConfigurations
type RelayProxyConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RelayProxyConfiguration `json:"items"`
}

// Repository type metadata.
var (
	RelayProxyConfiguration_Kind             = "RelayProxyConfiguration"
	RelayProxyConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RelayProxyConfiguration_Kind}.String()
	RelayProxyConfiguration_KindAPIVersion   = RelayProxyConfiguration_Kind + "." + CRDGroupVersion.String()
	RelayProxyConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(RelayProxyConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&RelayProxyConfiguration{}, &RelayProxyConfigurationList{})
}
