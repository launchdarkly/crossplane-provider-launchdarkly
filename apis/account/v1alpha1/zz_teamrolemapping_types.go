// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TeamRoleMappingInitParameters struct {

	// List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
	// A set of custom role keys to assign to the team.
	// +listType=set
	CustomRoleKeys []*string `json:"customRoleKeys,omitempty" tf:"custom_role_keys,omitempty"`

	// The team key.
	// The LaunchDarkly team key.
	TeamKey *string `json:"teamKey,omitempty" tf:"team_key,omitempty"`
}

type TeamRoleMappingObservation struct {

	// List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
	// A set of custom role keys to assign to the team.
	// +listType=set
	CustomRoleKeys []*string `json:"customRoleKeys,omitempty" tf:"custom_role_keys,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The team key.
	// The LaunchDarkly team key.
	TeamKey *string `json:"teamKey,omitempty" tf:"team_key,omitempty"`
}

type TeamRoleMappingParameters struct {

	// List of custom role keys the team will access. The referenced custom roles must already exist in LaunchDarkly. If they don't, the provider may behave unexpectedly.
	// A set of custom role keys to assign to the team.
	// +kubebuilder:validation:Optional
	// +listType=set
	CustomRoleKeys []*string `json:"customRoleKeys,omitempty" tf:"custom_role_keys,omitempty"`

	// The team key.
	// The LaunchDarkly team key.
	// +kubebuilder:validation:Optional
	TeamKey *string `json:"teamKey,omitempty" tf:"team_key,omitempty"`
}

// TeamRoleMappingSpec defines the desired state of TeamRoleMapping
type TeamRoleMappingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamRoleMappingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TeamRoleMappingInitParameters `json:"initProvider,omitempty"`
}

// TeamRoleMappingStatus defines the observed state of TeamRoleMapping.
type TeamRoleMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamRoleMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TeamRoleMapping is the Schema for the TeamRoleMappings API. Manage the custom roles associated with a LaunchDarkly team.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,launchdarkly}
type TeamRoleMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.customRoleKeys) || (has(self.initProvider) && has(self.initProvider.customRoleKeys))",message="spec.forProvider.customRoleKeys is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.teamKey) || (has(self.initProvider) && has(self.initProvider.teamKey))",message="spec.forProvider.teamKey is a required parameter"
	Spec   TeamRoleMappingSpec   `json:"spec"`
	Status TeamRoleMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamRoleMappingList contains a list of TeamRoleMappings
type TeamRoleMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TeamRoleMapping `json:"items"`
}

// Repository type metadata.
var (
	TeamRoleMapping_Kind             = "TeamRoleMapping"
	TeamRoleMapping_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TeamRoleMapping_Kind}.String()
	TeamRoleMapping_KindAPIVersion   = TeamRoleMapping_Kind + "." + CRDGroupVersion.String()
	TeamRoleMapping_GroupVersionKind = CRDGroupVersion.WithKind(TeamRoleMapping_Kind)
)

func init() {
	SchemeBuilder.Register(&TeamRoleMapping{}, &TeamRoleMappingList{})
}
