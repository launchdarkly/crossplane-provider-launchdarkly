// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomRoleInitParameters struct {

	// either reader or no_access. Defaults to reader.
	// The base permission level - either reader or no_access. Defaults to reader.
	BasePermissions *string `json:"basePermissions,omitempty" tf:"base_permissions,omitempty"`

	// (String) Description of the custom role.
	// Description of the custom role.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) A unique key that will be used to reference the custom role in your code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// A unique key that will be used to reference the custom role in your code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) A name for the custom role. This must be unique within your organization.
	// A name for the custom role. This must be unique within your organization.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) An array of the policy statements that define the permissions for the custom role. This field accepts role attributes. To use role attributes, use the syntax $${roleAttribute/<YOUR_ROLE_ATTRIBUTE>} in lieu of your usual resource keys. (see below for nested schema)
	// An array of the policy statements that define the permissions for the custom role. This field accepts [role attributes](https://docs.launchdarkly.com/home/getting-started/vocabulary#role-attribute). To use role attributes, use the syntax `$${roleAttribute/<YOUR_ROLE_ATTRIBUTE>}` in lieu of your usual resource keys.
	PolicyStatements []PolicyStatementsInitParameters `json:"policyStatements,omitempty" tf:"policy_statements,omitempty"`
}

type CustomRoleObservation struct {

	// either reader or no_access. Defaults to reader.
	// The base permission level - either reader or no_access. Defaults to reader.
	BasePermissions *string `json:"basePermissions,omitempty" tf:"base_permissions,omitempty"`

	// (String) Description of the custom role.
	// Description of the custom role.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) A unique key that will be used to reference the custom role in your code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// A unique key that will be used to reference the custom role in your code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) A name for the custom role. This must be unique within your organization.
	// A name for the custom role. This must be unique within your organization.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) An array of the policy statements that define the permissions for the custom role. This field accepts role attributes. To use role attributes, use the syntax $${roleAttribute/<YOUR_ROLE_ATTRIBUTE>} in lieu of your usual resource keys. (see below for nested schema)
	// An array of the policy statements that define the permissions for the custom role. This field accepts [role attributes](https://docs.launchdarkly.com/home/getting-started/vocabulary#role-attribute). To use role attributes, use the syntax `$${roleAttribute/<YOUR_ROLE_ATTRIBUTE>}` in lieu of your usual resource keys.
	PolicyStatements []PolicyStatementsObservation `json:"policyStatements,omitempty" tf:"policy_statements,omitempty"`
}

type CustomRoleParameters struct {

	// either reader or no_access. Defaults to reader.
	// The base permission level - either reader or no_access. Defaults to reader.
	// +kubebuilder:validation:Optional
	BasePermissions *string `json:"basePermissions,omitempty" tf:"base_permissions,omitempty"`

	// (String) Description of the custom role.
	// Description of the custom role.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) A unique key that will be used to reference the custom role in your code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// A unique key that will be used to reference the custom role in your code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) A name for the custom role. This must be unique within your organization.
	// A name for the custom role. This must be unique within your organization.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) An array of the policy statements that define the permissions for the custom role. This field accepts role attributes. To use role attributes, use the syntax $${roleAttribute/<YOUR_ROLE_ATTRIBUTE>} in lieu of your usual resource keys. (see below for nested schema)
	// An array of the policy statements that define the permissions for the custom role. This field accepts [role attributes](https://docs.launchdarkly.com/home/getting-started/vocabulary#role-attribute). To use role attributes, use the syntax `$${roleAttribute/<YOUR_ROLE_ATTRIBUTE>}` in lieu of your usual resource keys.
	// +kubebuilder:validation:Optional
	PolicyStatements []PolicyStatementsParameters `json:"policyStatements,omitempty" tf:"policy_statements,omitempty"`
}

type PolicyStatementsInitParameters struct {

	// (List of String)
	// The list of action specifiers defining the actions to which the statement applies.
	// Either `actions` or `not_actions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String)
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (List of String) The list of action specifiers defining the actions to which the statement does not apply.
	// The list of action specifiers defining the actions to which the statement does not apply.
	NotActions []*string `json:"notActions,omitempty" tf:"not_actions,omitempty"`

	// (List of String) The list of resource specifiers defining the resources to which the statement does not apply.
	// The list of resource specifiers defining the resources to which the statement does not apply.
	NotResources []*string `json:"notResources,omitempty" tf:"not_resources,omitempty"`

	// (List of String)
	// The list of resource specifiers defining the resources to which the statement applies.
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type PolicyStatementsObservation struct {

	// (List of String)
	// The list of action specifiers defining the actions to which the statement applies.
	// Either `actions` or `not_actions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String)
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (List of String) The list of action specifiers defining the actions to which the statement does not apply.
	// The list of action specifiers defining the actions to which the statement does not apply.
	NotActions []*string `json:"notActions,omitempty" tf:"not_actions,omitempty"`

	// (List of String) The list of resource specifiers defining the resources to which the statement does not apply.
	// The list of resource specifiers defining the resources to which the statement does not apply.
	NotResources []*string `json:"notResources,omitempty" tf:"not_resources,omitempty"`

	// (List of String)
	// The list of resource specifiers defining the resources to which the statement applies.
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type PolicyStatementsParameters struct {

	// (List of String)
	// The list of action specifiers defining the actions to which the statement applies.
	// Either `actions` or `not_actions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	// +kubebuilder:validation:Optional
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String)
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// (List of String) The list of action specifiers defining the actions to which the statement does not apply.
	// The list of action specifiers defining the actions to which the statement does not apply.
	// +kubebuilder:validation:Optional
	NotActions []*string `json:"notActions,omitempty" tf:"not_actions,omitempty"`

	// (List of String) The list of resource specifiers defining the resources to which the statement does not apply.
	// The list of resource specifiers defining the resources to which the statement does not apply.
	// +kubebuilder:validation:Optional
	NotResources []*string `json:"notResources,omitempty" tf:"not_resources,omitempty"`

	// (List of String)
	// The list of resource specifiers defining the resources to which the statement applies.
	// +kubebuilder:validation:Optional
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

// CustomRoleSpec defines the desired state of CustomRole
type CustomRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CustomRoleInitParameters `json:"initProvider,omitempty"`
}

// CustomRoleStatus defines the observed state of CustomRole.
type CustomRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CustomRole is the Schema for the CustomRoles API. Provides a LaunchDarkly custom role resource. -> Note: Custom roles are available to customers on an Enterprise LaunchDarkly plan. To learn more, read about our pricing https://launchdarkly.com/pricing/. To upgrade your plan, contact LaunchDarkly Sales https://launchdarkly.com/contact-sales/. This resource allows you to create and manage custom roles within your LaunchDarkly organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,launchdarkly}
type CustomRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CustomRoleSpec   `json:"spec"`
	Status CustomRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomRoleList contains a list of CustomRoles
type CustomRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomRole `json:"items"`
}

// Repository type metadata.
var (
	CustomRole_Kind             = "CustomRole"
	CustomRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomRole_Kind}.String()
	CustomRole_KindAPIVersion   = CustomRole_Kind + "." + CRDGroupVersion.String()
	CustomRole_GroupVersionKind = CRDGroupVersion.WithKind(CustomRole_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomRole{}, &CustomRoleList{})
}
