// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientSideAvailabilityInitParameters struct {

	// side ID.
	// Whether this flag is available to SDKs using the client-side ID.
	UsingEnvironmentID *bool `json:"usingEnvironmentId,omitempty" tf:"using_environment_id,omitempty"`

	// (Boolean) Whether this flag is available to SDKs using a mobile key.
	// Whether this flag is available to SDKs using a mobile key.
	UsingMobileKey *bool `json:"usingMobileKey,omitempty" tf:"using_mobile_key,omitempty"`
}

type ClientSideAvailabilityObservation struct {

	// side ID.
	// Whether this flag is available to SDKs using the client-side ID.
	UsingEnvironmentID *bool `json:"usingEnvironmentId,omitempty" tf:"using_environment_id,omitempty"`

	// (Boolean) Whether this flag is available to SDKs using a mobile key.
	// Whether this flag is available to SDKs using a mobile key.
	UsingMobileKey *bool `json:"usingMobileKey,omitempty" tf:"using_mobile_key,omitempty"`
}

type ClientSideAvailabilityParameters struct {

	// side ID.
	// Whether this flag is available to SDKs using the client-side ID.
	// +kubebuilder:validation:Optional
	UsingEnvironmentID *bool `json:"usingEnvironmentId,omitempty" tf:"using_environment_id,omitempty"`

	// (Boolean) Whether this flag is available to SDKs using a mobile key.
	// Whether this flag is available to SDKs using a mobile key.
	// +kubebuilder:validation:Optional
	UsingMobileKey *bool `json:"usingMobileKey,omitempty" tf:"using_mobile_key,omitempty"`
}

type CustomPropertiesInitParameters struct {

	// (String) The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The unique custom property key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The name of the variation.
	// The name of the custom property.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The list of custom property value strings.
	// The list of custom property value strings.
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomPropertiesObservation struct {

	// (String) The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The unique custom property key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The name of the variation.
	// The name of the custom property.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The list of custom property value strings.
	// The list of custom property value strings.
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomPropertiesParameters struct {

	// (String) The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The unique custom property key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The name of the variation.
	// The name of the custom property.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (List of String) The list of custom property value strings.
	// The list of custom property value strings.
	// +kubebuilder:validation:Optional
	Value []*string `json:"value" tf:"value,omitempty"`
}

type DefaultsInitParameters struct {

	// (Number) The index of the variation the flag will default to in all new environments when off.
	// The index of the variation the flag will default to in all new environments when off.
	OffVariation *float64 `json:"offVariation,omitempty" tf:"off_variation,omitempty"`

	// (Number) The index of the variation the flag will default to in all new environments when on.
	// The index of the variation the flag will default to in all new environments when on.
	OnVariation *float64 `json:"onVariation,omitempty" tf:"on_variation,omitempty"`
}

type DefaultsObservation struct {

	// (Number) The index of the variation the flag will default to in all new environments when off.
	// The index of the variation the flag will default to in all new environments when off.
	OffVariation *float64 `json:"offVariation,omitempty" tf:"off_variation,omitempty"`

	// (Number) The index of the variation the flag will default to in all new environments when on.
	// The index of the variation the flag will default to in all new environments when on.
	OnVariation *float64 `json:"onVariation,omitempty" tf:"on_variation,omitempty"`
}

type DefaultsParameters struct {

	// (Number) The index of the variation the flag will default to in all new environments when off.
	// The index of the variation the flag will default to in all new environments when off.
	// +kubebuilder:validation:Optional
	OffVariation *float64 `json:"offVariation" tf:"off_variation,omitempty"`

	// (Number) The index of the variation the flag will default to in all new environments when on.
	// The index of the variation the flag will default to in all new environments when on.
	// +kubebuilder:validation:Optional
	OnVariation *float64 `json:"onVariation" tf:"on_variation,omitempty"`
}

type FeatureFlagInitParameters struct {

	// (Boolean) Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
	// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// (Block List) (see below for nested schema)
	ClientSideAvailability []ClientSideAvailabilityInitParameters `json:"clientSideAvailability,omitempty" tf:"client_side_availability,omitempty"`

	// (Block Set, Max: 64) List of nested blocks describing the feature flag's custom properties (see below for nested schema)
	// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
	CustomProperties []CustomPropertiesInitParameters `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// (Block List, Max: 1) A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. (see below for nested schema)
	// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
	Defaults []DefaultsInitParameters `json:"defaults,omitempty" tf:"defaults,omitempty"`

	// (String) The feature flag's description.
	// The feature flag's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// set maintainer.
	// The feature flag maintainer's 24 character alphanumeric team member ID. `maintainer_team_key` cannot be set if `maintainer_id` is set.
	MaintainerID *string `json:"maintainerId,omitempty" tf:"maintainer_id,omitempty"`

	// (String) The key of the associated team that maintains this feature flag. maintainer_id cannot be set if maintainer_team_key is set
	// The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
	MaintainerTeamKey *string `json:"maintainerTeamKey,omitempty" tf:"maintainer_team_key,omitempty"`

	// readable name of the feature flag.
	// The human-readable name of the feature flag.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// +crossplane:generate:reference:type=github.com/launchdarkly/crossplane-provider-launchdarkly/apis/project/v1alpha1.Project
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// Reference to a Project in project to populate projectKey.
	// +kubebuilder:validation:Optional
	ProjectKeyRef *v1.Reference `json:"projectKeyRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectKey.
	// +kubebuilder:validation:Optional
	ProjectKeySelector *v1.Selector `json:"projectKeySelector,omitempty" tf:"-"`

	// (Set of String) Tags associated with your resource.
	// Tags associated with your resource.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Boolean) Specifies whether the flag is a temporary flag.
	// Specifies whether the flag is a temporary flag.
	Temporary *bool `json:"temporary,omitempty" tf:"temporary,omitempty"`

	// (String) The feature flag's variation type: boolean, string, number or json. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The feature flag's variation type: `boolean`, `string`, `number` or `json`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	VariationType *string `json:"variationType,omitempty" tf:"variation_type,omitempty"`

	// (Block List) An array of possible variations for the flag (see below for nested schema)
	// An array of possible variations for the flag
	Variations []VariationsInitParameters `json:"variations,omitempty" tf:"variations,omitempty"`
}

type FeatureFlagObservation struct {

	// (Boolean) Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
	// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// (Block List) (see below for nested schema)
	ClientSideAvailability []ClientSideAvailabilityObservation `json:"clientSideAvailability,omitempty" tf:"client_side_availability,omitempty"`

	// (Block Set, Max: 64) List of nested blocks describing the feature flag's custom properties (see below for nested schema)
	// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
	CustomProperties []CustomPropertiesObservation `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// (Block List, Max: 1) A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. (see below for nested schema)
	// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
	Defaults []DefaultsObservation `json:"defaults,omitempty" tf:"defaults,omitempty"`

	// (String) The feature flag's description.
	// The feature flag's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// set maintainer.
	// The feature flag maintainer's 24 character alphanumeric team member ID. `maintainer_team_key` cannot be set if `maintainer_id` is set.
	MaintainerID *string `json:"maintainerId,omitempty" tf:"maintainer_id,omitempty"`

	// (String) The key of the associated team that maintains this feature flag. maintainer_id cannot be set if maintainer_team_key is set
	// The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
	MaintainerTeamKey *string `json:"maintainerTeamKey,omitempty" tf:"maintainer_team_key,omitempty"`

	// readable name of the feature flag.
	// The human-readable name of the feature flag.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (Set of String) Tags associated with your resource.
	// Tags associated with your resource.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Boolean) Specifies whether the flag is a temporary flag.
	// Specifies whether the flag is a temporary flag.
	Temporary *bool `json:"temporary,omitempty" tf:"temporary,omitempty"`

	// (String) The feature flag's variation type: boolean, string, number or json. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The feature flag's variation type: `boolean`, `string`, `number` or `json`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	VariationType *string `json:"variationType,omitempty" tf:"variation_type,omitempty"`

	// (Block List) An array of possible variations for the flag (see below for nested schema)
	// An array of possible variations for the flag
	Variations []VariationsObservation `json:"variations,omitempty" tf:"variations,omitempty"`
}

type FeatureFlagParameters struct {

	// (Boolean) Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
	// Specifies whether the flag is archived or not. Note that you cannot create a new flag that is archived, but can update a flag to be archived.
	// +kubebuilder:validation:Optional
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// (Block List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	ClientSideAvailability []ClientSideAvailabilityParameters `json:"clientSideAvailability,omitempty" tf:"client_side_availability,omitempty"`

	// (Block Set, Max: 64) List of nested blocks describing the feature flag's custom properties (see below for nested schema)
	// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties)
	// +kubebuilder:validation:Optional
	CustomProperties []CustomPropertiesParameters `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// (Block List, Max: 1) A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. (see below for nested schema)
	// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed.
	// +kubebuilder:validation:Optional
	Defaults []DefaultsParameters `json:"defaults,omitempty" tf:"defaults,omitempty"`

	// (String) The feature flag's description.
	// The feature flag's description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// set maintainer.
	// The feature flag maintainer's 24 character alphanumeric team member ID. `maintainer_team_key` cannot be set if `maintainer_id` is set.
	// +kubebuilder:validation:Optional
	MaintainerID *string `json:"maintainerId,omitempty" tf:"maintainer_id,omitempty"`

	// (String) The key of the associated team that maintains this feature flag. maintainer_id cannot be set if maintainer_team_key is set
	// The key of the associated team that maintains this feature flag. `maintainer_id` cannot be set if `maintainer_team_key` is set
	// +kubebuilder:validation:Optional
	MaintainerTeamKey *string `json:"maintainerTeamKey,omitempty" tf:"maintainer_team_key,omitempty"`

	// readable name of the feature flag.
	// The human-readable name of the feature flag.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// +crossplane:generate:reference:type=github.com/launchdarkly/crossplane-provider-launchdarkly/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// Reference to a Project in project to populate projectKey.
	// +kubebuilder:validation:Optional
	ProjectKeyRef *v1.Reference `json:"projectKeyRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectKey.
	// +kubebuilder:validation:Optional
	ProjectKeySelector *v1.Selector `json:"projectKeySelector,omitempty" tf:"-"`

	// (Set of String) Tags associated with your resource.
	// Tags associated with your resource.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Boolean) Specifies whether the flag is a temporary flag.
	// Specifies whether the flag is a temporary flag.
	// +kubebuilder:validation:Optional
	Temporary *bool `json:"temporary,omitempty" tf:"temporary,omitempty"`

	// (String) The feature flag's variation type: boolean, string, number or json. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The feature flag's variation type: `boolean`, `string`, `number` or `json`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// +kubebuilder:validation:Optional
	VariationType *string `json:"variationType,omitempty" tf:"variation_type,omitempty"`

	// (Block List) An array of possible variations for the flag (see below for nested schema)
	// An array of possible variations for the flag
	// +kubebuilder:validation:Optional
	Variations []VariationsParameters `json:"variations,omitempty" tf:"variations,omitempty"`
}

type VariationsInitParameters struct {

	// (String) The variation's description.
	// The variation's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name of the variation.
	// The name of the variation.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The list of custom property value strings.
	// The variation value. The value's type must correspond to the `variation_type` argument. For example: `variation_type = "boolean"` accepts only `true` or `false`. The `number` variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. `1.1` and `1.100` will both be converted to `1.1`). This means that if you change the order of your `variations` block, you may end up destroying and recreating those variations.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VariationsObservation struct {

	// (String) The variation's description.
	// The variation's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name of the variation.
	// The name of the variation.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The list of custom property value strings.
	// The variation value. The value's type must correspond to the `variation_type` argument. For example: `variation_type = "boolean"` accepts only `true` or `false`. The `number` variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. `1.1` and `1.100` will both be converted to `1.1`). This means that if you change the order of your `variations` block, you may end up destroying and recreating those variations.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VariationsParameters struct {

	// (String) The variation's description.
	// The variation's description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name of the variation.
	// The name of the variation.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The list of custom property value strings.
	// The variation value. The value's type must correspond to the `variation_type` argument. For example: `variation_type = "boolean"` accepts only `true` or `false`. The `number` variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. `1.1` and `1.100` will both be converted to `1.1`). This means that if you change the order of your `variations` block, you may end up destroying and recreating those variations.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// FeatureFlagSpec defines the desired state of FeatureFlag
type FeatureFlagSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FeatureFlagParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FeatureFlagInitParameters `json:"initProvider,omitempty"`
}

// FeatureFlagStatus defines the observed state of FeatureFlag.
type FeatureFlagStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FeatureFlagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FeatureFlag is the Schema for the FeatureFlags API. Provides a LaunchDarkly feature flag resource. This resource allows you to create and manage feature flags within your LaunchDarkly organization. -> Note: This resource is for global-level feature flag configuration.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,launchdarkly}
type FeatureFlag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.variationType) || (has(self.initProvider) && has(self.initProvider.variationType))",message="spec.forProvider.variationType is a required parameter"
	Spec   FeatureFlagSpec   `json:"spec"`
	Status FeatureFlagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FeatureFlagList contains a list of FeatureFlags
type FeatureFlagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FeatureFlag `json:"items"`
}

// Repository type metadata.
var (
	FeatureFlag_Kind             = "FeatureFlag"
	FeatureFlag_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FeatureFlag_Kind}.String()
	FeatureFlag_KindAPIVersion   = FeatureFlag_Kind + "." + CRDGroupVersion.String()
	FeatureFlag_GroupVersionKind = CRDGroupVersion.WithKind(FeatureFlag_Kind)
)

func init() {
	SchemeBuilder.Register(&FeatureFlag{}, &FeatureFlagList{})
}
