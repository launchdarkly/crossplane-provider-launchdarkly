// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClausesInitParameters struct {

	// (String) The user attribute to operate on
	// The user attribute to operate on
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind associated with this rule clause. If omitted, defaults to `user`.
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// (Boolean) Whether to negate the rule clause.
	// Whether to negate the rule clause.
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) The operator associated with the rule clause. Available options are in, endsWith, startsWith, matches, contains, lessThan, lessThanOrEqual, greaterThanOrEqual, before, after, segmentMatch, semVerEqual, semVerLessThan, and semVerGreaterThan. Read LaunchDarkly's Operators documentation for more information.
	// The operator associated with the rule clause. Available options are `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`. Read LaunchDarkly's [Operators](https://docs.launchdarkly.com/sdk/concepts/flag-evaluation-rules#operators) documentation for more information.
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// (String) The type for each of the clause's values. Available types are boolean, string, and number. If omitted, value_type defaults to string.
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`. If omitted, `value_type` defaults to `string`.
	ValueType *string `json:"valueType,omitempty" tf:"value_type,omitempty"`

	// (List of String) List of user strings to target.
	// The list of values associated with the rule clause.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ClausesObservation struct {

	// (String) The user attribute to operate on
	// The user attribute to operate on
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind associated with this rule clause. If omitted, defaults to `user`.
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// (Boolean) Whether to negate the rule clause.
	// Whether to negate the rule clause.
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) The operator associated with the rule clause. Available options are in, endsWith, startsWith, matches, contains, lessThan, lessThanOrEqual, greaterThanOrEqual, before, after, segmentMatch, semVerEqual, semVerLessThan, and semVerGreaterThan. Read LaunchDarkly's Operators documentation for more information.
	// The operator associated with the rule clause. Available options are `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`. Read LaunchDarkly's [Operators](https://docs.launchdarkly.com/sdk/concepts/flag-evaluation-rules#operators) documentation for more information.
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// (String) The type for each of the clause's values. Available types are boolean, string, and number. If omitted, value_type defaults to string.
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`. If omitted, `value_type` defaults to `string`.
	ValueType *string `json:"valueType,omitempty" tf:"value_type,omitempty"`

	// (List of String) List of user strings to target.
	// The list of values associated with the rule clause.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ClausesParameters struct {

	// (String) The user attribute to operate on
	// The user attribute to operate on
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind associated with this rule clause. If omitted, defaults to `user`.
	// +kubebuilder:validation:Optional
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// (Boolean) Whether to negate the rule clause.
	// Whether to negate the rule clause.
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) The operator associated with the rule clause. Available options are in, endsWith, startsWith, matches, contains, lessThan, lessThanOrEqual, greaterThanOrEqual, before, after, segmentMatch, semVerEqual, semVerLessThan, and semVerGreaterThan. Read LaunchDarkly's Operators documentation for more information.
	// The operator associated with the rule clause. Available options are `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`. Read LaunchDarkly's [Operators](https://docs.launchdarkly.com/sdk/concepts/flag-evaluation-rules#operators) documentation for more information.
	// +kubebuilder:validation:Optional
	Op *string `json:"op" tf:"op,omitempty"`

	// (String) The type for each of the clause's values. Available types are boolean, string, and number. If omitted, value_type defaults to string.
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`. If omitted, `value_type` defaults to `string`.
	// +kubebuilder:validation:Optional
	ValueType *string `json:"valueType,omitempty" tf:"value_type,omitempty"`

	// (List of String) List of user strings to target.
	// The list of values associated with the rule clause.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type ContextTargetsInitParameters struct {

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind on which the flag should target in this environment. User (`user`) targets should be specified as `targets` attribute blocks.
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// (List of String) List of user strings to target.
	// List of `user` strings to target.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The index of the variation to serve if a user target value is matched.
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type ContextTargetsObservation struct {

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind on which the flag should target in this environment. User (`user`) targets should be specified as `targets` attribute blocks.
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// (List of String) List of user strings to target.
	// List of `user` strings to target.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The index of the variation to serve if a user target value is matched.
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type ContextTargetsParameters struct {

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind on which the flag should target in this environment. User (`user`) targets should be specified as `targets` attribute blocks.
	// +kubebuilder:validation:Optional
	ContextKind *string `json:"contextKind" tf:"context_kind,omitempty"`

	// (List of String) List of user strings to target.
	// List of `user` strings to target.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The index of the variation to serve if a user target value is matched.
	// +kubebuilder:validation:Optional
	Variation *float64 `json:"variation" tf:"variation,omitempty"`
}

type FallthroughInitParameters struct {

	// (String) Group percentage rollout by a custom attribute. This argument is only valid if rollout_weights is also specified.
	// Group percentage rollout by a custom attribute. This argument is only valid if rollout_weights is also specified.
	BucketBy *string `json:"bucketBy,omitempty" tf:"bucket_by,omitempty"`

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to `user`.
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// (List of Number) List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to true. The sum of the rollout_weights must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either variation or rollout_weights.
	// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rollout_weights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rollout_weights`.
	RolloutWeights []*float64 `json:"rolloutWeights,omitempty" tf:"rollout_weights,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The default integer variation index to serve if no `prerequisites`, `target`, or `rules` apply. You must specify either `variation` or `rollout_weights`.
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type FallthroughObservation struct {

	// (String) Group percentage rollout by a custom attribute. This argument is only valid if rollout_weights is also specified.
	// Group percentage rollout by a custom attribute. This argument is only valid if rollout_weights is also specified.
	BucketBy *string `json:"bucketBy,omitempty" tf:"bucket_by,omitempty"`

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to `user`.
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// (List of Number) List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to true. The sum of the rollout_weights must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either variation or rollout_weights.
	// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rollout_weights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rollout_weights`.
	RolloutWeights []*float64 `json:"rolloutWeights,omitempty" tf:"rollout_weights,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The default integer variation index to serve if no `prerequisites`, `target`, or `rules` apply. You must specify either `variation` or `rollout_weights`.
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type FallthroughParameters struct {

	// (String) Group percentage rollout by a custom attribute. This argument is only valid if rollout_weights is also specified.
	// Group percentage rollout by a custom attribute. This argument is only valid if rollout_weights is also specified.
	// +kubebuilder:validation:Optional
	BucketBy *string `json:"bucketBy,omitempty" tf:"bucket_by,omitempty"`

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to `user`.
	// +kubebuilder:validation:Optional
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// (List of Number) List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to true. The sum of the rollout_weights must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either variation or rollout_weights.
	// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rollout_weights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rollout_weights`.
	// +kubebuilder:validation:Optional
	RolloutWeights []*float64 `json:"rolloutWeights,omitempty" tf:"rollout_weights,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The default integer variation index to serve if no `prerequisites`, `target`, or `rules` apply. You must specify either `variation` or `rollout_weights`.
	// +kubebuilder:validation:Optional
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type FeatureFlagEnvironmentInitParameters struct {

	// user context kinds for each variation. (see below for nested schema)
	// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
	ContextTargets []ContextTargetsInitParameters `json:"contextTargets,omitempty" tf:"context_targets,omitempty"`

	// (String) The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	EnvKey *string `json:"envKey,omitempty" tf:"env_key,omitempty"`

	// (Block List, Min: 1, Max: 1) Nested block describing the default variation to serve if no prerequisites, target, or rules apply. (see below for nested schema)
	// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
	Fallthrough []FallthroughInitParameters `json:"fallthrough,omitempty" tf:"fallthrough,omitempty"`

	// (String) The feature flag's unique id in the format project_key/flag_key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	FlagID *string `json:"flagId,omitempty" tf:"flag_id,omitempty"`

	// (Number) The index of the variation to serve if targeting is disabled.
	// The index of the variation to serve if targeting is disabled.
	OffVariation *float64 `json:"offVariation,omitempty" tf:"off_variation,omitempty"`

	// (Boolean) Whether targeting is enabled. Defaults to false if not set.
	// Whether targeting is enabled. Defaults to `false` if not set.
	On *bool `json:"on,omitempty" tf:"on,omitempty"`

	// (Block List) List of nested blocks describing prerequisite feature flags rules. (see below for nested schema)
	// List of nested blocks describing prerequisite feature flags rules.
	Prerequisites []PrerequisitesInitParameters `json:"prerequisites,omitempty" tf:"prerequisites,omitempty"`

	// (Block List) List of logical targeting rules. (see below for nested schema)
	// List of logical targeting rules.
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (Block Set) Set of nested blocks describing the individual user targets for each variation. (see below for nested schema)
	// Set of nested blocks describing the individual user targets for each variation.
	Targets []TargetsInitParameters `json:"targets,omitempty" tf:"targets,omitempty"`

	// (Boolean) Whether to send event data back to LaunchDarkly. Defaults to false if not set.
	// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
	TrackEvents *bool `json:"trackEvents,omitempty" tf:"track_events,omitempty"`
}

type FeatureFlagEnvironmentObservation struct {

	// user context kinds for each variation. (see below for nested schema)
	// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
	ContextTargets []ContextTargetsObservation `json:"contextTargets,omitempty" tf:"context_targets,omitempty"`

	// (String) The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	EnvKey *string `json:"envKey,omitempty" tf:"env_key,omitempty"`

	// (Block List, Min: 1, Max: 1) Nested block describing the default variation to serve if no prerequisites, target, or rules apply. (see below for nested schema)
	// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
	Fallthrough []FallthroughObservation `json:"fallthrough,omitempty" tf:"fallthrough,omitempty"`

	// (String) The feature flag's unique id in the format project_key/flag_key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	FlagID *string `json:"flagId,omitempty" tf:"flag_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The index of the variation to serve if targeting is disabled.
	// The index of the variation to serve if targeting is disabled.
	OffVariation *float64 `json:"offVariation,omitempty" tf:"off_variation,omitempty"`

	// (Boolean) Whether targeting is enabled. Defaults to false if not set.
	// Whether targeting is enabled. Defaults to `false` if not set.
	On *bool `json:"on,omitempty" tf:"on,omitempty"`

	// (Block List) List of nested blocks describing prerequisite feature flags rules. (see below for nested schema)
	// List of nested blocks describing prerequisite feature flags rules.
	Prerequisites []PrerequisitesObservation `json:"prerequisites,omitempty" tf:"prerequisites,omitempty"`

	// (Block List) List of logical targeting rules. (see below for nested schema)
	// List of logical targeting rules.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// (Block Set) Set of nested blocks describing the individual user targets for each variation. (see below for nested schema)
	// Set of nested blocks describing the individual user targets for each variation.
	Targets []TargetsObservation `json:"targets,omitempty" tf:"targets,omitempty"`

	// (Boolean) Whether to send event data back to LaunchDarkly. Defaults to false if not set.
	// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
	TrackEvents *bool `json:"trackEvents,omitempty" tf:"track_events,omitempty"`
}

type FeatureFlagEnvironmentParameters struct {

	// user context kinds for each variation. (see below for nested schema)
	// The set of nested blocks describing the individual targets for non-user context kinds for each variation.
	// +kubebuilder:validation:Optional
	ContextTargets []ContextTargetsParameters `json:"contextTargets,omitempty" tf:"context_targets,omitempty"`

	// (String) The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The environment key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// +kubebuilder:validation:Optional
	EnvKey *string `json:"envKey,omitempty" tf:"env_key,omitempty"`

	// (Block List, Min: 1, Max: 1) Nested block describing the default variation to serve if no prerequisites, target, or rules apply. (see below for nested schema)
	// Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.
	// +kubebuilder:validation:Optional
	Fallthrough []FallthroughParameters `json:"fallthrough,omitempty" tf:"fallthrough,omitempty"`

	// (String) The feature flag's unique id in the format project_key/flag_key. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// The feature flag's unique `id` in the format `project_key/flag_key`. A change in this field will force the destruction of the existing resource and the creation of a new one.
	// +kubebuilder:validation:Optional
	FlagID *string `json:"flagId,omitempty" tf:"flag_id,omitempty"`

	// (Number) The index of the variation to serve if targeting is disabled.
	// The index of the variation to serve if targeting is disabled.
	// +kubebuilder:validation:Optional
	OffVariation *float64 `json:"offVariation,omitempty" tf:"off_variation,omitempty"`

	// (Boolean) Whether targeting is enabled. Defaults to false if not set.
	// Whether targeting is enabled. Defaults to `false` if not set.
	// +kubebuilder:validation:Optional
	On *bool `json:"on,omitempty" tf:"on,omitempty"`

	// (Block List) List of nested blocks describing prerequisite feature flags rules. (see below for nested schema)
	// List of nested blocks describing prerequisite feature flags rules.
	// +kubebuilder:validation:Optional
	Prerequisites []PrerequisitesParameters `json:"prerequisites,omitempty" tf:"prerequisites,omitempty"`

	// (Block List) List of logical targeting rules. (see below for nested schema)
	// List of logical targeting rules.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (Block Set) Set of nested blocks describing the individual user targets for each variation. (see below for nested schema)
	// Set of nested blocks describing the individual user targets for each variation.
	// +kubebuilder:validation:Optional
	Targets []TargetsParameters `json:"targets,omitempty" tf:"targets,omitempty"`

	// (Boolean) Whether to send event data back to LaunchDarkly. Defaults to false if not set.
	// Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
	// +kubebuilder:validation:Optional
	TrackEvents *bool `json:"trackEvents,omitempty" tf:"track_events,omitempty"`
}

type PrerequisitesInitParameters struct {

	// (String) The prerequisite feature flag's key.
	// The prerequisite feature flag's `key`.
	FlagKey *string `json:"flagKey,omitempty" tf:"flag_key,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The index of the prerequisite feature flag's variation to target.
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type PrerequisitesObservation struct {

	// (String) The prerequisite feature flag's key.
	// The prerequisite feature flag's `key`.
	FlagKey *string `json:"flagKey,omitempty" tf:"flag_key,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The index of the prerequisite feature flag's variation to target.
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type PrerequisitesParameters struct {

	// (String) The prerequisite feature flag's key.
	// The prerequisite feature flag's `key`.
	// +kubebuilder:validation:Optional
	FlagKey *string `json:"flagKey" tf:"flag_key,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The index of the prerequisite feature flag's variation to target.
	// +kubebuilder:validation:Optional
	Variation *float64 `json:"variation" tf:"variation,omitempty"`
}

type RulesInitParameters struct {

	// (String) Group percentage rollout by a custom attribute. This argument is only valid if rollout_weights is also specified.
	// Group percentage rollout by a custom attribute. This argument is only valid if `rollout_weights` is also specified.
	BucketBy *string `json:"bucketBy,omitempty" tf:"bucket_by,omitempty"`

	// (Block List) List of nested blocks specifying the logical clauses to evaluate (see below for nested schema)
	// List of nested blocks specifying the logical clauses to evaluate
	Clauses []ClausesInitParameters `json:"clauses,omitempty" tf:"clauses,omitempty"`

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind associated with the specified rollout. This argument is only valid if `rollout_weights` is also specified. Defaults to `user` if omitted.
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// readable description of the targeting rule.
	// A human-readable description of the targeting rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (List of Number) List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to true. The sum of the rollout_weights must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either variation or rollout_weights.
	// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rollout_weights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rollout_weights`.
	RolloutWeights []*float64 `json:"rolloutWeights,omitempty" tf:"rollout_weights,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rollout_weights`
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type RulesObservation struct {

	// (String) Group percentage rollout by a custom attribute. This argument is only valid if rollout_weights is also specified.
	// Group percentage rollout by a custom attribute. This argument is only valid if `rollout_weights` is also specified.
	BucketBy *string `json:"bucketBy,omitempty" tf:"bucket_by,omitempty"`

	// (Block List) List of nested blocks specifying the logical clauses to evaluate (see below for nested schema)
	// List of nested blocks specifying the logical clauses to evaluate
	Clauses []ClausesObservation `json:"clauses,omitempty" tf:"clauses,omitempty"`

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind associated with the specified rollout. This argument is only valid if `rollout_weights` is also specified. Defaults to `user` if omitted.
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// readable description of the targeting rule.
	// A human-readable description of the targeting rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (List of Number) List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to true. The sum of the rollout_weights must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either variation or rollout_weights.
	// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rollout_weights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rollout_weights`.
	RolloutWeights []*float64 `json:"rolloutWeights,omitempty" tf:"rollout_weights,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rollout_weights`
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type RulesParameters struct {

	// (String) Group percentage rollout by a custom attribute. This argument is only valid if rollout_weights is also specified.
	// Group percentage rollout by a custom attribute. This argument is only valid if `rollout_weights` is also specified.
	// +kubebuilder:validation:Optional
	BucketBy *string `json:"bucketBy,omitempty" tf:"bucket_by,omitempty"`

	// (Block List) List of nested blocks specifying the logical clauses to evaluate (see below for nested schema)
	// List of nested blocks specifying the logical clauses to evaluate
	// +kubebuilder:validation:Optional
	Clauses []ClausesParameters `json:"clauses,omitempty" tf:"clauses,omitempty"`

	// (String) The context kind associated with the specified rollout. This argument is only valid if rollout_weights is also specified. If omitted, defaults to user.
	// The context kind associated with the specified rollout. This argument is only valid if `rollout_weights` is also specified. Defaults to `user` if omitted.
	// +kubebuilder:validation:Optional
	ContextKind *string `json:"contextKind,omitempty" tf:"context_kind,omitempty"`

	// readable description of the targeting rule.
	// A human-readable description of the targeting rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (List of Number) List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to true. The sum of the rollout_weights must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either variation or rollout_weights.
	// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rollout_weights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rollout_weights`.
	// +kubebuilder:validation:Optional
	RolloutWeights []*float64 `json:"rolloutWeights,omitempty" tf:"rollout_weights,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rollout_weights`
	// +kubebuilder:validation:Optional
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type TargetsInitParameters struct {

	// (List of String) List of user strings to target.
	// List of `user` strings to target.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The index of the variation to serve if a user target value is matched.
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type TargetsObservation struct {

	// (List of String) List of user strings to target.
	// List of `user` strings to target.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The index of the variation to serve if a user target value is matched.
	Variation *float64 `json:"variation,omitempty" tf:"variation,omitempty"`
}

type TargetsParameters struct {

	// (List of String) List of user strings to target.
	// List of `user` strings to target.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`

	// (Number) The default integer variation index to serve if no prerequisites, target, or rules apply. You must specify either variation or rollout_weights.
	// The index of the variation to serve if a user target value is matched.
	// +kubebuilder:validation:Optional
	Variation *float64 `json:"variation" tf:"variation,omitempty"`
}

// FeatureFlagEnvironmentSpec defines the desired state of FeatureFlagEnvironment
type FeatureFlagEnvironmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FeatureFlagEnvironmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FeatureFlagEnvironmentInitParameters `json:"initProvider,omitempty"`
}

// FeatureFlagEnvironmentStatus defines the observed state of FeatureFlagEnvironment.
type FeatureFlagEnvironmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FeatureFlagEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FeatureFlagEnvironment is the Schema for the FeatureFlagEnvironments API. Provides a LaunchDarkly environment-specific feature flag resource. This resource allows you to create and manage environment-specific feature flags attributes within your LaunchDarkly organization. Subsequent applies may overwrite the changes made by experiments and break your experiment. An alternate workaround is to use the lifecycle.ignore_changes https://developer.hashicorp.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,launchdarkly}
type FeatureFlagEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.envKey) || (has(self.initProvider) && has(self.initProvider.envKey))",message="spec.forProvider.envKey is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fallthrough) || (has(self.initProvider) && has(self.initProvider.fallthrough))",message="spec.forProvider.fallthrough is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.flagId) || (has(self.initProvider) && has(self.initProvider.flagId))",message="spec.forProvider.flagId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.offVariation) || (has(self.initProvider) && has(self.initProvider.offVariation))",message="spec.forProvider.offVariation is a required parameter"
	Spec   FeatureFlagEnvironmentSpec   `json:"spec"`
	Status FeatureFlagEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FeatureFlagEnvironmentList contains a list of FeatureFlagEnvironments
type FeatureFlagEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FeatureFlagEnvironment `json:"items"`
}

// Repository type metadata.
var (
	FeatureFlagEnvironment_Kind             = "FeatureFlagEnvironment"
	FeatureFlagEnvironment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FeatureFlagEnvironment_Kind}.String()
	FeatureFlagEnvironment_KindAPIVersion   = FeatureFlagEnvironment_Kind + "." + CRDGroupVersion.String()
	FeatureFlagEnvironment_GroupVersionKind = CRDGroupVersion.WithKind(FeatureFlagEnvironment_Kind)
)

func init() {
	SchemeBuilder.Register(&FeatureFlagEnvironment{}, &FeatureFlagEnvironmentList{})
}
